Abstract class names should end with a `Base` suffix

[source, csharp]
----
var abstractClasses = Assembly.Load("Nest").GetTypes()
				.Where(t => t.IsClass && t.IsAbstract && !t.IsSealed)
				.Select(t => t.Name.Split('`')[0])
				.ToList();
abstractClass.Should().EndWith("Base");
----
Request class names should end with "Request"

[source, csharp]
----
var types = Assembly.Load("Nest").GetTypes();
var requests = types
				.Where(t => typeof(IRequest).IsAssignableFrom(t))
				.Select(t => t.Name.Split('`')[0])
				.ToList();
request.Should().EndWith("Request");
----
Response class names should end with "Response"

[source, csharp]
----
var types = Assembly.Load("Nest").GetTypes();
var responses = types
				.Where(t => typeof(IResponse).IsAssignableFrom(t))
				.Select(t => t.Name.Split('`')[0])
				.ToList();
response.Should().EndWith("Response");
----
Request and Response class names should be one to one in *most* cases.
e.g. ValidateRequest => ValidateResponse, and not ValidateQueryRequest => ValidateResponse

[source, csharp]
----
var types = Assembly.Load("Nest").GetTypes();
var requests = new HashSet<string>(types
				.Where(t => t.IsClass && !t.IsAbstract && typeof(IRequest).IsAssignableFrom(t) && !(t.Name.EndsWith("Descriptor")))
				.Select(t => t.Name.Split('`')[0].Replace("Request", ""))
			);
var responses = types
				.Where(t => t.IsClass && !t.IsAbstract && typeof(IResponse).IsAssignableFrom(t))
				.Select(t => t.Name.Split('`')[0].Replace("Response", ""));
var exceptions = new string[] { "Cat" };
responses = responses.Where(r => !exceptions.Contains(r)).ToList();
requests.Should().Contain(response);
----
