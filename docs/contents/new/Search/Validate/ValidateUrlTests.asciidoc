[source, csharp]
----
var hardcoded = "hardcoded";
await POST("/project/commits/_validate/query")
				.Fluent(c=>c.Validate<CommitActivity>(s=>s))
				.Request(c=>c.Validate(new ValidateQueryRequest<CommitActivity>()))
				.FluentAsync(c=>c.ValidateAsync<CommitActivity>(s=>s))
				.RequestAsync(c=>c.ValidateAsync(new ValidateQueryRequest<CommitActivity>()))
				;
await POST("/project/hardcoded/_validate/query")
				.Fluent(c=>c.Validate<CommitActivity>(s=>s.Type(hardcoded)))
				.Request(c=>c.Validate(new ValidateQueryRequest<CommitActivity>(typeof(Project), hardcoded)))
				.Request(c=>c.Validate(new ValidateQueryRequest(typeof(Project), hardcoded)))
				.FluentAsync(c=>c.ValidateAsync<CommitActivity>(s=>s.Type(hardcoded)))
				.RequestAsync(c=>c.ValidateAsync(new ValidateQueryRequest<CommitActivity>(typeof(Project), hardcoded)))
				.RequestAsync(c=>c.ValidateAsync(new ValidateQueryRequest(typeof(Project), hardcoded)))
				;
await POST("/project/_validate/query")
				.Fluent(c=>c.Validate<Project>(s=>s.Type(Types.All)))
				.Fluent(c=>c.Validate<Project>(s=>s.AllTypes()))
				.Request(c=>c.Validate(new ValidateQueryRequest("project")))
				.Request(c=>c.Validate(new ValidateQueryRequest<Project>("project", Types.All)))
				.FluentAsync(c=>c.ValidateAsync<Project>(s=>s.Type(Types.All)))
				.RequestAsync(c=>c.ValidateAsync(new ValidateQueryRequest<Project>(typeof(Project), Types.All)))
				.FluentAsync(c=>c.ValidateAsync<Project>(s=>s.AllTypes()))
				;
await POST("/hardcoded/_validate/query")
				.Fluent(c=>c.Validate<Project>(s=>s.Index(hardcoded).Type(Types.All)))
				.Fluent(c=>c.Validate<Project>(s=>s.Index(hardcoded).AllTypes()))
				.Request(c=>c.Validate(new ValidateQueryRequest(hardcoded)))
				.Request(c=>c.Validate(new ValidateQueryRequest<Project>(hardcoded, Types.All)))
				.FluentAsync(c=>c.ValidateAsync<Project>(s=>s.Index(hardcoded).Type(Types.All)))
				.RequestAsync(c=>c.ValidateAsync(new ValidateQueryRequest<Project>(hardcoded, Types.All)))
				.FluentAsync(c=>c.ValidateAsync<Project>(s=>s.Index(hardcoded).AllTypes()))
				;
await POST("/_validate/query")
				.Fluent(c=>c.Validate<Project>(s=>s.AllTypes().AllIndices()))
				.Request(c=>c.Validate(new ValidateQueryRequest()))
				.Request(c=>c.Validate(new ValidateQueryRequest<Project>(Nest.Indices.All, Types.All)))
				.FluentAsync(c=>c.ValidateAsync<Project>(s=>s.AllIndices().Type(Types.All)))
				.RequestAsync(c=>c.ValidateAsync(new ValidateQueryRequest<Project>(Nest.Indices.All, Types.All)))
				.RequestAsync(c=>c.ValidateAsync(new ValidateQueryRequest()))
				;
----
