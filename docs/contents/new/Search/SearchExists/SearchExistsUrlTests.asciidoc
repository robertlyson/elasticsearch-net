[source, csharp]
----
var hardcoded = "hardcoded";
await GET("/project/commits/_search/exists")
				.Fluent(c => c.SearchExists<CommitActivity>(s => s))
				.Request(c => c.SearchExists(new SearchExistsRequest<CommitActivity>()))
				.FluentAsync(c => c.SearchExistsAsync<CommitActivity>(s => s))
				.RequestAsync(c => c.SearchExistsAsync(new SearchExistsRequest<CommitActivity>()))
				;
await GET("/project/hardcoded/_search/exists")
				.Fluent(c => c.SearchExists<CommitActivity>(s => s.Type(hardcoded)))
				.Request(c => c.SearchExists(new SearchExistsRequest<CommitActivity>(typeof(Project), hardcoded)))
				.Request(c => c.SearchExists(new SearchExistsRequest(typeof(Project), hardcoded)))
				.FluentAsync(c => c.SearchExistsAsync<CommitActivity>(s => s.Type(hardcoded)))
				.RequestAsync(c => c.SearchExistsAsync(new SearchExistsRequest<CommitActivity>(typeof(Project), hardcoded)))
				.RequestAsync(c => c.SearchExistsAsync(new SearchExistsRequest(typeof(Project), hardcoded)))
				;
await GET("/project/_search/exists")
				.Fluent(c => c.SearchExists<Project>(s => s.Type(Types.All)))
				.Fluent(c => c.SearchExists<Project>(s => s.AllTypes()))
				.Request(c => c.SearchExists(new SearchExistsRequest("project")))
				.Request(c => c.SearchExists(new SearchExistsRequest<Project>("project", Types.All)))
				.FluentAsync(c => c.SearchExistsAsync<Project>(s => s.Type(Types.All)))
				.RequestAsync(c => c.SearchExistsAsync(new SearchExistsRequest<Project>(typeof(Project), Types.All)))
				.FluentAsync(c => c.SearchExistsAsync<Project>(s => s.AllTypes()))
				;
await GET("/hardcoded/_search/exists")
				.Fluent(c => c.SearchExists<Project>(s => s.Index(hardcoded).Type(Types.All)))
				.Fluent(c => c.SearchExists<Project>(s => s.Index(hardcoded).AllTypes()))
				.Request(c => c.SearchExists(new SearchExistsRequest(hardcoded)))
				.Request(c => c.SearchExists(new SearchExistsRequest<Project>(hardcoded, Types.All)))
				.FluentAsync(c => c.SearchExistsAsync<Project>(s => s.Index(hardcoded).Type(Types.All)))
				.RequestAsync(c => c.SearchExistsAsync(new SearchExistsRequest<Project>(hardcoded, Types.All)))
				.FluentAsync(c => c.SearchExistsAsync<Project>(s => s.Index(hardcoded).AllTypes()))
				;
await GET("/_search/exists")
				.Fluent(c => c.SearchExists<Project>(s => s.AllTypes().AllIndices()))
				.Request(c => c.SearchExists(new SearchExistsRequest()))
				.Request(c => c.SearchExists(new SearchExistsRequest<Project>(Nest.Indices.All, Types.All)))
				.FluentAsync(c => c.SearchExistsAsync<Project>(s => s.AllIndices().Type(Types.All)))
				.RequestAsync(c => c.SearchExistsAsync(new SearchExistsRequest<Project>(Nest.Indices.All, Types.All)))
				.RequestAsync(c => c.SearchExistsAsync(new SearchExistsRequest()))
				;
await POST("/_search/exists")
				.Fluent(c => c.SearchExists<Project>(s => s.AllTypes().AllIndices().Query(q => q.MatchAll())))
				.Request(c => c.SearchExists(new SearchExistsRequest { Query = new MatchAllQuery() }))
				.Request(c => c.SearchExists(new SearchExistsRequest<Project>(Nest.Indices.All, Types.All) { Query = new MatchAllQuery() }))
				.FluentAsync(c => c.SearchExistsAsync<Project>(s => s.AllIndices().Type(Types.All).Query(q => q.MatchAll())))
				.RequestAsync(c => c.SearchExistsAsync(new SearchExistsRequest<Project>(Nest.Indices.All, Types.All) { Query = new MatchAllQuery() }))
				.RequestAsync(c => c.SearchExistsAsync(new SearchExistsRequest { Query = new MatchAllQuery() }))
                ;
----
