[source, csharp]
----
this._cluster  = _cluster ?? this.Cluster();
this._clusterAsync = _clusterAsync ?? this.Cluster();
this._cluster.ChangeTime(selector);
this._clusterAsync.ChangeTime(selector);
this._cluster  = _cluster ?? this.Cluster();
this.AssertPoolBeforeCall?.Invoke(this._cluster.ConnectionPool);
this.Response = this._cluster.ClientCall();
this.AssertPoolAfterCall?.Invoke(this._cluster.ConnectionPool);
this._clusterAsync = _clusterAsync ?? this.Cluster();
this.ResponseAsync = await this._clusterAsync.ClientCallAsync();
this.AssertPoolAfterCall?.Invoke(this._clusterAsync.ConnectionPool);
await this.TraceStartup();
var auditTrail = this.Response.ApiCall.AuditTrail;
var asyncAuditTrail = this.ResponseAsync.ApiCall.AuditTrail;
auditTrail.Count.Should().Be(asyncAuditTrail.Count, "calling async should have the same audit trail length as the sync call");
AssertTrailOnResponse(callTrace, auditTrail, true, nthCall);
AssertTrailOnResponse(callTrace, asyncAuditTrail, false, nthCall);
callTrace?.AssertPoolAfterCall?.Invoke(this._cluster.ConnectionPool);
callTrace?.AssertPoolAfterCall?.Invoke(this._clusterAsync.ConnectionPool);
var auditor = this;
auditor = await auditor.TraceCall(a.a, a.i);
var typeOfTrail = (sync ? "synchronous" : "asynchronous") + " audit trail";
var nthClientCall = (nthCall + 1).ToOrdinal();
callTrace.Select(c=>c.Event).Should().ContainInOrder(auditTrail.Select(a=>a.Event), $"the {nthClientCall} client call's {typeOfTrail} should assert ALL audit trail items");
var i = t.i;
var audit = t.a;
var nthAuditTrailItem = (i + 1).ToOrdinal();
var because = $"thats the {{0}} specified on the {nthAuditTrailItem} item in the {nthClientCall} client call's {typeOfTrail}";
var c = callTrace[i];
audit.Event.Should().Be(c.Event, string.Format(because, "event"));
audit.Node.Uri.Port.Should().Be(c.Port.Value, string.Format(because, "port"));
c.SimpleAssert?.Invoke(audit);
c.AssertWithBecause?.Invoke(string.Format(because, "custom assertion"), audit);
----
