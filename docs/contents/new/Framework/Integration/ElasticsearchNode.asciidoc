[source, csharp]
----
this.Stop();
var timeout = TimeSpan.FromSeconds(60);
var handle = new ManualResetEvent(false);
var alreadyUp = new ElasticClient().RootNodeInfo();
this.Started = true;
this.Port = 9200;
this.Info = new ElasticsearchNodeInfo(alreadyUp.Version.Number, "0", alreadyUp.Version.LuceneVersion);
this._blockingSubject.OnNext(handle);
this._process = new ObservableProcess(this.Binary,
				$"-Des.cluster.name={this.ClusterName}",
				$"-Des.node.name={this.NodeName}"
			);
var observable = Observable.Using(() => this._process, process => process.Start())
				.Select(consoleLine => new ElasticsearchMessage(consoleLine));
this._processListener = observable.Subscribe(onNext: s => HandleConsoleMessage(s, handle));
this.Stop();
ElasticsearchNodeInfo info;
int port;
this.Info = info;
this._blockingSubject.OnNext(handle);
this.Started = true;
this.Port = port;
var zip = $"elasticsearch-{this.Version}.zip";
var downloadUrl = $"https://download.elasticsearch.org/elasticsearch/release/org/elasticsearch/distribution/zip/elasticsearch/{this.Version}/{zip}";
var localZip = Path.Combine(this.RoamingFolder, zip);
Directory.CreateDirectory(this.RoamingFolder);
new WebClient().DownloadFile(downloadUrl, localZip);
ZipFile.ExtractToDirectory(localZip, this.RoamingFolder);
InstallPlugins();
var hunspellFolder = Path.Combine(this.RoamingClusterFolder, "config", "hunspell", "en_US");
var hunspellPrefix = Path.Combine(hunspellFolder, "en_US");
Directory.CreateDirectory(hunspellFolder);
File.WriteAllText(hunspellPrefix + ".dic", "1\r\nabcdegf");
File.WriteAllText(hunspellPrefix + ".aff", "SET UTF8\r\nSFX P Y 1\r\nSFX P 0 s");
var analysFolder = Path.Combine(this.RoamingClusterFolder, "config", "analysis");
Directory.CreateDirectory(analysFolder);
var fopXml = Path.Combine(analysFolder, "fop") + ".xml";
File.WriteAllText(fopXml, "<languages-info />");
var customStems = Path.Combine(analysFolder, "custom_stems") + ".txt";
File.WriteAllText(customStems, "");
var stopwords = Path.Combine(analysFolder, "stopwords") + ".txt";
File.WriteAllText(stopwords, "");
var pluginBat = Path.Combine(this.RoamingClusterFolder, "bin", "plugin") + ".bat";
var installPath = plugin.Key;
var localPath = plugin.Value;
var pluginFolder = Path.Combine(this.RoamingClusterFolder, "bin", "plugins", localPath);
var timeout = TimeSpan.FromSeconds(60);
var handle = new ManualResetEvent(false);
Task.Factory.StartNew(() =>
				{
					using (var p = new ObservableProcess(pluginBat, "install", installPath))
					{
						var o = p.Start();
						o.Subscribe(Console.WriteLine,
							(e) =>
							{
								handle.Set();
								throw e;
							},
							() => handle.Set()
							);
					}
				});
var o = p.Start();
o.Subscribe(Console.WriteLine,
							(e) =>
							{
								handle.Set();
								throw e;
							},
							() => handle.Set()
							);
handle.Set();
this.Started = false;
Console.WriteLine($"Stopping... ran integrations: {this.RunningIntegrations}");
Console.WriteLine($"Node started: {this.Started} on port: {this.Port} using PID: {this.Info?.Pid}");
this._process?.Dispose();
this._processListener?.Dispose();
var esProcess = Process.GetProcessById(this.Info.Pid);
Console.WriteLine($"Killing elasticsearch PID {this.Info.Pid}");
esProcess.Kill();
esProcess.WaitForExit(5000);
esProcess.Close();
var dataFolder = Path.Combine(this.RoamingClusterFolder, "data", this.ClusterName);
Console.WriteLine($"attempting to delete cluster data: {dataFolder}");
Directory.Delete(dataFolder, true);
var logPath = Path.Combine(this.RoamingClusterFolder, "logs");
var files = Directory.GetFiles(logPath, this.ClusterName + "*.log");
Console.WriteLine($"attempting to delete log file: {f}");
File.Delete(f);
this.Stop();
nodeInfo = null;
var match = InfoParser.Match(this.Message);
var version = match.Groups["version"].Value.Trim();
var pid = match.Groups["pid"].Value.Trim();
var build = match.Groups["build"].Value.Trim();
nodeInfo = new ElasticsearchNodeInfo(version, pid, build);
port = 0;
var match = PortParser.Match(this.Message);
var portString = match.Groups["port"].Value.Trim();
port = int.Parse(portString);
----
