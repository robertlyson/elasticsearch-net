[source, csharp]
----
var stdOut = this.Process.CreateStandardOutputObservable();
var stdErr = this.Process.CreateStandardErrorObservable();
var stdOutSubscription = stdOut.Subscribe(observer);
var stdErrSubscription = stdErr.Subscribe(observer);
var processExited = Observable.FromEventPattern(h => this.Process.Exited += h, h => this.Process.Exited -= h);
var processError = CreateProcessExitSubscription(this.Process, processExited, observer);
this.Process.Start();
this.Process.BeginOutputReadLine();
this.Process.BeginErrorReadLine();
this.Started = true;
observer.OnError(new Exception(
							$"Process '{process.StartInfo.FileName}' terminated with error code {process.ExitCode}"));
observer.OnCompleted();
this.Started = false;
process?.Close();
this.Process?.Kill();
this.Process?.WaitForExit(2000);
this.Process?.Close();
this.Started = false;
var receivedStdErr =
				Observable.FromEventPattern<DataReceivedEventHandler, DataReceivedEventArgs>
					(h => process.ErrorDataReceived += h, h => process.ErrorDataReceived -= h)
				.Select(e => e.EventArgs.Data);
var cancel = Disposable.Create(process.CancelErrorRead);
var receivedStdOut =
				Observable.FromEventPattern<DataReceivedEventHandler, DataReceivedEventArgs>
					(h => process.OutputDataReceived += h, h => process.OutputDataReceived -= h)
				.Select(e => e.EventArgs.Data);
var cancel = Disposable.Create(process.CancelOutputRead);
----
