[source, csharp]
----
Activator.CreateInstance<TInitializer>()
----
[source, csharp]
----
var client = this.Client;
var dict = new Dictionary<string, IResponse>();
OnBeforeCall(client);
dict.Add("fluent", fluent(client, this.Fluent));
OnBeforeCall(client);
dict.Add("fluentAsync", await fluentAsync(client, this.Fluent));
OnBeforeCall(client);
dict.Add("request", request(client, this.Initializer));
OnBeforeCall(client);
dict.Add("requestAsync", await requestAsync(client, this.Initializer));
var paths = (this.UrlPath ?? "").Split(new [] { '?' }, 2);
string path = paths.First(), query = string.Empty;
query = paths.Last();
var expectedUri = new UriBuilder("http","localhost", _integrationPort, path,  "?" + query).Uri;
u.AbsolutePath.Should().Be(expectedUri.AbsolutePath);
u = new UriBuilder(u.Scheme, u.Host, u.Port, u.AbsolutePath, u.Query.Replace("pretty=true", "")).Uri;
var queries = new[] {u.Query, expectedUri.Query};
queries.Last().Should().Be(queries.First());
var clientKeyValues = u.Query.Substring(1).Split('&')
				.Select(v => v.Split('='))
				.Where(k=>!string.IsNullOrWhiteSpace(k[0]))
				.ToDictionary(k => k[0], v => v.Last());
var expectedKeyValues = expectedUri.Query.Substring(1).Split('&')
				.Select(v => v.Split('='))
				.Where(k=>!string.IsNullOrWhiteSpace(k[0]))
				.ToDictionary(k => k[0], v => v.Last());
clientKeyValues.Count().Should().Be(expectedKeyValues.Count());
clientKeyValues.Should().ContainKeys(expectedKeyValues.Keys.ToArray());
clientKeyValues.Should().Equal(expectedKeyValues);
var responses = await this._responses;
var response = kv.Value as TResponse;
assert(response);
----
