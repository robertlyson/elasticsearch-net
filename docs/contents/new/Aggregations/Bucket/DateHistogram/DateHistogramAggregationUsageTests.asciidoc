A multi-bucket aggregation similar to the histogram except it can only be applied on date values. 
From a functionality perspective, this histogram supports the same features as the normal histogram. 
The main difference is that the interval can be specified by date/time expressions.
Be sure to read the elasticsearch documentation {ref}/search-aggregations-bucket-datehistogram-aggregation.html[on this subject here]

[source, csharp]
----
s => s
.Aggregations(aggs => aggs
	.DateHistogram("projects_started_per_month", date => date
		.Field(p => p.StartedOn)
		.Interval(DateInterval.Month)
		.MinimumDocumentCount(2)
		.ExtendedBounds(FixedDate.AddYears(-1), FixedDate.AddYears(1))
		.Order(HistogramOrder.CountAscending)
		.Aggregations(childAggs => childAggs
.Terms("project_tags", avg => avg.Field(p => p.Tags))
		)
	)
)
----
[source, csharp]
----
new SearchRequest<Project>
{
	Aggregations = new DateHistogramAgg("projects_started_per_month")
	{
		Field = Field<Project>(p => p.StartedOn),
		Interval = DateInterval.Month,
		MinimumDocumentCount = 2,
		ExtendedBounds = new ExtendedBounds<DateTime>
		{
Minimum = FixedDate.AddYears(-1),
Maximum = FixedDate.AddYears(1),
		},
		Order = HistogramOrder.CountAscending,
		Aggregations =
new TermsAgg("project_tags") { Field = Field<Project>(p => p.Tags) }
	}
}
----
[source, csharp]
----
var response = this.Client.Search<Project>(s => s
				.Aggregations(aggs => aggs
					.DateHistogram("date_hist", dh => dh
						.Field(p => p.StartedOn)
						.Interval("2d")
						.MinimumDocumentCount(1)
					)
				)
			);
response.IsValid.Should().BeTrue();
----
Using the `.Agg` aggregation helper we can fetch our aggregation results easily 
in the correct type. [Be sure to read more about `.Agg` vs `.Aggregations` on the response here]()

[source, csharp]
----
var dateHistogram = response.Aggs.DateHistogram("date_hist");
----
[source, csharp]
----
dateHistogram.Should().NotBeNull();
dateHistogram.Items.Should().NotBeNull();
dateHistogram.Items.Count.Should().BeGreaterThan(10);
item.Date.Should().NotBe(default(DateTime));
item.DocCount.Should().BeGreaterThan(0);
----
