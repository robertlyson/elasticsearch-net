# Covariant Search Results
NEST directly supports returning covariant result sets.
Meaning a result can be typed to an interface or baseclass
but the actual instance type of the result can be that of the subclass directly
Let look at an example, imagine we want to search over multiple types that all implement
`ISearchResult`

We have three implementations of `ISearchResult` namely `A`, `B` and `C`

The most straightforward way to search over multiple types is to
type the response to the parent interface or base class
and pass the actual types we want to search over using `.Types()`

[source, csharp]
----
var result = this._client.Search<ISearchResult>(s => s
	.Type(Types.Type(typeof(A), typeof(B), typeof(C)))
	.Size(100)
);
----
Nest will translate this to a search over /index/a,b,c/_search. 
hits that have `"_type" : "a"` will be serialized to `A` and so forth

[source, csharp]
----
result.IsValid.Should().BeTrue();
----
Here we assume our response is valid and that we received the 100 documents
we are expecting. Remember `result.Documents` is an `IEnumerable
ISearchResult
`

[source, csharp]
----
result.Documents.Count().Should().Be(100);
----
To prove the returned result set is covariant we filter the documents based on their 
actual type and assert the returned subsets are the expected sizes

[source, csharp]
----
var aDocuments = result.Documents.OfType<A>();
----
[source, csharp]
----
var bDocuments = result.Documents.OfType<B>();
var cDocuments = result.Documents.OfType<C>();
aDocuments.Count().Should().Be(25);
bDocuments.Count().Should().Be(25);
cDocuments.Count().Should().Be(50);
----
and assume that properties that only exist on the subclass itself are properly filled

[source, csharp]
----
aDocuments.Should().OnlyContain(a => a.PropertyOnA > 0);
----
[source, csharp]
----
bDocuments.Should().OnlyContain(a => a.PropertyOnB > 0);
cDocuments.Should().OnlyContain(a => a.PropertyOnC > 0);
----
A more low level approach is to inspect the hit yourself and determine the CLR type to deserialize to

[source, csharp]
----
var result = this._client.Search<ISearchResult>(s => s
	.ConcreteTypeSelector((d, h) => h.Type == "a" ? typeof(A) : h.Type == "b" ? typeof(B) : typeof(C))
	.Size(100)
);
----
here for each hit we'll call the delegate with `d` which a dynamic representation of the `_source`
and a typed `h` which represents the encapsulating hit.

[source, csharp]
----
result.IsValid.Should().BeTrue();
----
Here we assume our response is valid and that we received the 100 documents
we are expecting. Remember `result.Documents` is an `IEnumerable
ISearchResult
`

[source, csharp]
----
result.Documents.Count().Should().Be(100);
----
To prove the returned result set is covariant we filter the documents based on their 
actual type and assert the returned subsets are the expected sizes

[source, csharp]
----
var aDocuments = result.Documents.OfType<A>();
----
[source, csharp]
----
var bDocuments = result.Documents.OfType<B>();
var cDocuments = result.Documents.OfType<C>();
aDocuments.Count().Should().Be(25);
bDocuments.Count().Should().Be(25);
cDocuments.Count().Should().Be(50);
----
and assume that properties that only exist on the subclass itself are properly filled

[source, csharp]
----
aDocuments.Should().OnlyContain(a => a.PropertyOnA > 0);
----
[source, csharp]
----
bDocuments.Should().OnlyContain(a => a.PropertyOnB > 0);
cDocuments.Should().OnlyContain(a => a.PropertyOnC > 0);
----
