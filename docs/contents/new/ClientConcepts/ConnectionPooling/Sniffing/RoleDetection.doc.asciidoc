== Sniffing role detection

When we sniff the custer state we detect the role of the node whether its master eligable and holds data
We use this information when selecting a node to perform an API call on.

[source, csharp]
----
var audit = new Auditor(() => Framework.Cluster
				.Nodes(10)
				.Sniff(s => s.Fails(Always))
				.Sniff(s => s.OnPort(9202)
					.Succeeds(Always, Framework.Cluster.Nodes(8).MasterEligable(9200, 9201, 9202))
				)
				.SniffingConnectionPool()
				.AllDefaults()
			)
			{
				AssertPoolBeforeCall = (pool) =>
				{
					pool.Should().NotBeNull();
					pool.Nodes.Should().HaveCount(10);
					pool.Nodes.Where(n => n.MasterEligable).Should().HaveCount(10);
				},
				AssertPoolAfterCall = (pool) =>
				{
					pool.Should().NotBeNull();
					pool.Nodes.Should().HaveCount(8);
					pool.Nodes.Where(n => n.MasterEligable).Should().HaveCount(3);
				}
			};
pool.Should().NotBeNull();
pool.Nodes.Should().HaveCount(10);
pool.Nodes.Where(n => n.MasterEligable).Should().HaveCount(10);
pool.Should().NotBeNull();
pool.Nodes.Should().HaveCount(8);
pool.Nodes.Where(n => n.MasterEligable).Should().HaveCount(3);
await audit.TraceStartup();
var audit = new Auditor(() => Framework.Cluster
				.Nodes(10)
				.Sniff(s => s.Fails(Always))
				.Sniff(s => s.OnPort(9202)
					.Succeeds(Always, Framework.Cluster.Nodes(8).StoresNoData(9200, 9201, 9202))
				)
				.SniffingConnectionPool()
				.AllDefaults()
			)
			{
				AssertPoolBeforeCall = (pool) =>
				{
					pool.Should().NotBeNull();
					pool.Nodes.Should().HaveCount(10);
					pool.Nodes.Where(n => n.HoldsData).Should().HaveCount(10);
				},

				AssertPoolAfterCall = (pool) =>
				{
					pool.Should().NotBeNull();
					pool.Nodes.Should().HaveCount(8);
					pool.Nodes.Where(n => n.HoldsData).Should().HaveCount(5);
				}
			};
pool.Should().NotBeNull();
pool.Nodes.Should().HaveCount(10);
pool.Nodes.Where(n => n.HoldsData).Should().HaveCount(10);
pool.Should().NotBeNull();
pool.Nodes.Should().HaveCount(8);
pool.Nodes.Where(n => n.HoldsData).Should().HaveCount(5);
await audit.TraceStartup();
----
