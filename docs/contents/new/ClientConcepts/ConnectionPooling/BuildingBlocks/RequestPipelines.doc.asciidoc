== Request pipeline
Every request is executed in the context of `RequestPipeline` when you are using the default `ITransport` implementation.


[source, csharp]
----
var settings = TestClient.CreateSettings();
----
When calling Request(Async) on Transport the whole coordination of the request is deferred to a new instance in a `using` block. 

[source, csharp]
----
var pipeline = new RequestPipeline(settings, new DateTimeProvider(), new MemoryStreamFactory(), new SearchRequestParameters());
----
[source, csharp]
----
pipeline.GetType().Should().Implement<IDisposable>();
----
However the transport does not instantiate RequestPipeline directly, it uses a pluggable `IRequestPipelineFactory`

[source, csharp]
----
var requestPipelineFactory = new RequestPipelineFactory();
----
[source, csharp]
----
var requestPipeline = requestPipelineFactory.Create(settings, new DateTimeProvider(), new MemoryStreamFactory(), new SearchRequestParameters());
requestPipeline.Should().BeOfType<RequestPipeline>();
requestPipeline.GetType().Should().Implement<IDisposable>();
----
which can be passed to the transport when instantiating a client 

[source, csharp]
----
var transport = new Transport<ConnectionSettings>(settings, requestPipelineFactory, new DateTimeProvider(), new MemoryStreamFactory());
----
this allows you to have requests executed on your own custom request pipeline 

[source, csharp]
----
var pool = setupPool(new[] {TestClient.CreateNode(), TestClient.CreateNode(9201)});
var settings = new ConnectionSettings(pool, TestClient.CreateConnection());
settings = settingsSelector?.Invoke(settings) ?? settings;
var singleNodePipeline = CreatePipeline(uris => new SingleNodeConnectionPool(uris.First()));
var staticPipeline = CreatePipeline(uris => new StaticConnectionPool(uris));
var sniffingPipeline = CreatePipeline(uris => new SniffingConnectionPool(uris));
----
Here we have setup three pipelines using three different connection pools, lets see how they behave

[source, csharp]
----
singleNodePipeline.FirstPoolUsageNeedsSniffing.Should().BeFalse();
----
[source, csharp]
----
staticPipeline.FirstPoolUsageNeedsSniffing.Should().BeFalse();
sniffingPipeline.FirstPoolUsageNeedsSniffing.Should().BeTrue();
----
Only the cluster that supports reseeding will opt in to FirstPoolUsageNeedsSniffing() 
You can however disable this on ConnectionSettings

[source, csharp]
----
sniffingPipeline = CreatePipeline(uris => new SniffingConnectionPool(uris), s => s.SniffOnStartup(false));
----
[source, csharp]
----
sniffingPipeline.FirstPoolUsageNeedsSniffing.Should().BeFalse();
var singleNodePipeline = CreatePipeline(uris => new SingleNodeConnectionPool(uris.First()));
var staticPipeline = CreatePipeline(uris => new StaticConnectionPool(uris));
var sniffingPipeline = CreatePipeline(uris => new SniffingConnectionPool(uris));
singleNodePipeline.SniffsOnConnectionFailure.Should().BeFalse();
staticPipeline.SniffsOnConnectionFailure.Should().BeFalse();
sniffingPipeline.SniffsOnConnectionFailure.Should().BeTrue();
----
Only the cluster that supports reseeding will opt in to SniffsOnConnectionFailure() 
You can however disable this on ConnectionSettings

[source, csharp]
----
sniffingPipeline = CreatePipeline(uris => new SniffingConnectionPool(uris), s => s.SniffOnConnectionFault(false));
----
[source, csharp]
----
sniffingPipeline.SniffsOnConnectionFailure.Should().BeFalse();
var dateTime = new TestableDateTimeProvider();
var singleNodePipeline = CreatePipeline(uris => new SingleNodeConnectionPool(uris.First(), dateTime), dateTimeProvider: dateTime);
var staticPipeline = CreatePipeline(uris => new StaticConnectionPool(uris, dateTimeProvider: dateTime), dateTimeProvider: dateTime);
var sniffingPipeline = CreatePipeline(uris => new SniffingConnectionPool(uris, dateTimeProvider: dateTime), dateTimeProvider: dateTime);
singleNodePipeline.SniffsOnStaleCluster.Should().BeFalse();
staticPipeline.SniffsOnStaleCluster.Should().BeFalse();
sniffingPipeline.SniffsOnStaleCluster.Should().BeTrue();
singleNodePipeline.StaleClusterState.Should().BeFalse();
staticPipeline.StaleClusterState.Should().BeFalse();
sniffingPipeline.StaleClusterState.Should().BeFalse();
----
go one hour into the future 

[source, csharp]
----
dateTime.ChangeTime(d=>d.Add(TimeSpan.FromHours(2)));
----
connection pools that do not support reseeding never go stale 

[source, csharp]
----
singleNodePipeline.StaleClusterState.Should().BeFalse();
----
[source, csharp]
----
staticPipeline.StaleClusterState.Should().BeFalse();
----
the sniffing connection pool supports reseeding so the pipeline will signal the state is out of date 

[source, csharp]
----
sniffingPipeline.StaleClusterState.Should().BeTrue();
----
A request pipeline also checks whether the overall time across multiple retries exceeds the reqeust timeout
See the maxretry documentation for more details, here we assert that our request pipeline exposes this propertly

[source, csharp]
----
var dateTime = new TestableDateTimeProvider();
var singleNodePipeline = CreatePipeline(uris => new SingleNodeConnectionPool(uris.First(), dateTime), dateTimeProvider: dateTime);
var staticPipeline = CreatePipeline(uris => new StaticConnectionPool(uris, dateTimeProvider: dateTime), dateTimeProvider: dateTime);
var sniffingPipeline = CreatePipeline(uris => new SniffingConnectionPool(uris, dateTimeProvider: dateTime), dateTimeProvider: dateTime);
singleNodePipeline.IsTakingTooLong.Should().BeFalse();
staticPipeline.IsTakingTooLong.Should().BeFalse();
sniffingPipeline.IsTakingTooLong.Should().BeFalse();
----
go one hour into the future 

[source, csharp]
----
dateTime.ChangeTime(d=>d.Add(TimeSpan.FromHours(2)));
----
connection pools that do not support reseeding never go stale 

[source, csharp]
----
singleNodePipeline.IsTakingTooLong.Should().BeTrue();
----
[source, csharp]
----
staticPipeline.IsTakingTooLong.Should().BeTrue();
----
the sniffing connection pool supports reseeding so the pipeline will signal the state is out of date 

[source, csharp]
----
sniffingPipeline.IsTakingTooLong.Should().BeTrue();
----
request pipeline exposes the DateTime it started, here we assert it started 2 hours in the past 

[source, csharp]
----
(dateTime.Now() - singleNodePipeline.StartedOn).Should().BePositive().And.BeCloseTo(TimeSpan.FromHours(2));
----
[source, csharp]
----
(dateTime.Now() - staticPipeline.StartedOn).Should().BePositive().And.BeCloseTo(TimeSpan.FromHours(2));
(dateTime.Now() - sniffingPipeline.StartedOn).Should().BePositive().And.BeCloseTo(TimeSpan.FromHours(2));
----
