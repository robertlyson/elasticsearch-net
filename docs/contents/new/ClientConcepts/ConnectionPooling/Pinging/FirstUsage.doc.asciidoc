== Pinging

Pinging is enabled by default for the Static 
Sniffing connection pool. 
This means that the first time a node is used or resurrected we issue a ping with a smaller (configurable) timeout.
This allows us to fail and fallover to a healthy node faster

A cluster with 2 nodes where the second node fails on ping 

[source, csharp]
----
var audit = new Auditor(() => Framework.Cluster
	.Nodes(2)
	.Ping(p => p.Succeeds(Always))
	.Ping(p => p.OnPort(9201).FailAlways())
	.StaticConnectionPool()
	.AllDefaults()
);
----
[source, csharp]
----
await audit.TraceCalls(
----
The first call goes to 9200 which succeeds 

[source, csharp]
----
new CallTrace { 
		{ PingSuccess, 9200},
		{ HealthyResponse, 9200},
		{ pool =>
		{
pool.Nodes.Where(n=>!n.IsAlive).Should().HaveCount(0);
		} }
	},
----
The 2nd call does a ping on 9201 because its used for the first time. 
It fails so we wrap over to node 9200 which we've already pinged 

[source, csharp]
----
new CallTrace { 
		{ PingFailure, 9201},
		{ HealthyResponse, 9200},
----
Finally we assert that the connectionpool has one node that is marked as dead 

[source, csharp]
----
{ pool =>  pool.Nodes.Where(n=>!n.IsAlive).Should().HaveCount(1) }
	}
);
----
A cluster with 4 nodes where the second and third pings fail 

[source, csharp]
----
var audit = new Auditor(() => Framework.Cluster
	.Nodes(4)
	.Ping(p => p.SucceedAlways())
	.Ping(p => p.OnPort(9201).FailAlways())
	.Ping(p => p.OnPort(9202).FailAlways())
	.StaticConnectionPool()
	.AllDefaults()
);
----
[source, csharp]
----
await audit.TraceCalls(
----
The first call goes to 9200 which succeeds 

[source, csharp]
----
new CallTrace { 
		{ PingSuccess, 9200},
		{ HealthyResponse, 9200},
		{ pool =>
		{
pool.Nodes.Where(n=>!n.IsAlive).Should().HaveCount(0);
		} }
	},
----
The 2nd call does a ping on 9201 because its used for the first time. 
It fails and so we ping 9202 which also fails. We then ping 9203 becuase 
we haven't used it before and it succeeds 

[source, csharp]
----
new CallTrace { 
		{ PingFailure, 9201},
		{ PingFailure, 9202},
		{ PingSuccess, 9203},
		{ HealthyResponse, 9203},
----
Finally we assert that the connectionpool has two nodes that are marked as dead 

[source, csharp]
----
{ pool =>  pool.Nodes.Where(n=>!n.IsAlive).Should().HaveCount(2) }
	}
);
----
A healthy cluster of 4 (min master nodes of 3 of course!) 

[source, csharp]
----
var audit = new Auditor(() => Framework.Cluster
	.Nodes(4)
	.Ping(p => p.SucceedAlways())
	.StaticConnectionPool()
	.AllDefaults()
);
----
[source, csharp]
----
await audit.TraceCalls(
				new CallTrace { { PingSuccess, 9200}, { HealthyResponse, 9200} },
				new CallTrace { { PingSuccess, 9201}, { HealthyResponse, 9201} },
				new CallTrace { { PingSuccess, 9202}, { HealthyResponse, 9202} },
				new CallTrace { { PingSuccess, 9203}, { HealthyResponse, 9203} },
				new CallTrace { { HealthyResponse, 9200} },
				new CallTrace { { HealthyResponse, 9201} },
				new CallTrace { { HealthyResponse, 9202} },
				new CallTrace { { HealthyResponse, 9203} },
				new CallTrace { { HealthyResponse, 9200} }
			);
----
